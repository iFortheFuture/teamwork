#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define _CRT_SECURE_NO_WARNINGS


/* 函数：简化分数 */
void simplifyFraction(int& numerator, int& denominator) {
    int i = denominator - 1;
    while (i > 0) {
        if (denominator % i == 0 && numerator % i == 0) {
            denominator = denominator / i;
            numerator = numerator / i;
        }
        i--;
    }
}

/* 函数：除法 */
void division(int num1, int num2, float& result, int a[]) {
    int wholePart = 0;
    result = num1 / num2;
    wholePart = num1 / num2;
    int remainder = num1 % num2;
    if (remainder == 0) {
        a[0] = wholePart;
        a[1] = '?';
    }
    else if (wholePart == 0) {
        simplifyFraction(remainder, num2);
        a[0] = remainder;
        a[1] = '/';
        a[2] = num2;
        a[3] = '?';
    }
    else {
        simplifyFraction(remainder, num2);
        a[0] = wholePart;
        a[1] = '\'';
        a[2] = remainder;
        a[3] = '/';
        a[4] = num2;
    }
}

/* 函数：检查重复 */
int checkDuplicates(int count, int answers[], int questions[][10]) {
    int j = count - 1;
    for (; j >= 0; j--) {
        if (answers[count] == answers[j])
            if (questions[count][1] == questions[j][1])
                if ((questions[count][0] == questions[j][0] && questions[count][2] == questions[j][2]) ||
                    (questions[count][0] == questions[j][2] && questions[count][2] == questions[j][0])) {
                    return 1;
                }
    }
    return 0;
}

/* 函数：生成题目 */
void generateExercises(int count, int range, int answers[], int questions[][10]) {
    if (count < 1 || range < 10 || count > 100000) {
        printf("规定：题目数量应大于0且小于100000，范围应不小于10。\n");
        return;
    }

    srand(time(NULL));

    int i = 0;
    float result = 0;
    while (i < count) {
        int num1 = rand() % range;
        int num2 = rand() % range;
        int operators[4] = { '+', '-', '*', '/' };
        int opIndex = rand() % 4;
        int question[5] = { 0,0,0,0,0 };
        switch (opIndex) {
        case 0:
            result = num1 + num2;
            question[0] = num1;
            question[1] = operators[opIndex];
            question[2] = num2;
            question[3] = '=';
            question[4] = result;
            break;
        case 1:
            result = num1 - num2;
            question[0] = num1;
            question[1] = operators[opIndex];
            question[2] = num2;
            question[3] = '=';
            question[4] = result;
            break;
        case 2:
            result = num1 * num2;
            question[0] = num1;
            question[1] = operators[opIndex];
            question[2] = num2;
            question[3] = '=';
            question[4] = result;
            break;
        case 3:
            division(num1, num2, result, question);
            break;
        default:
            break;
        }

        answers[i] = (int)result;
        for (int j = 0; j < 5; j++) {
            questions[i][j] = question[j];
        }

        int flag = checkDuplicates(i, answers, questions);
        if (flag == 0) i++;
    }
}

/* 函数：将题目写入文件 */
void printExercisesToFile(int count, int questions[][10]) {
    FILE* file;
    if (fopen_s(&file, "Exercises.txt", "w") != 0) {
        printf("无法打开 Exercises.txt 文件进行写入。\n");
        return;
    }

    for (int i = 0; i < count; i++) {
        fprintf(file, "%d%c%d%c\n", questions[i][0], questions[i][1], questions[i][2], questions[i][3]);
    }

    fclose(file);
}

/* 函数：将答案写入文件 */
void printAnswersToFile(int count, int answers[], int questions[][10]) {
    FILE* file;
    if (fopen_s(&file, "Answers.txt", "w") != 0) {
        printf("无法打开 Answers.txt 文件进行写入。\n");
        return;
    }

    for (int i = 0; i < count; i++) {
        fprintf(file, "%d\n", answers[i]);
    }

    fclose(file);
}

int main() {
    int* answers = (int*)malloc(100000 * sizeof(int));
    int(*questions)[10] = (int(*)[10])malloc(100000 * sizeof(int[10]));
    int count = 0;
    int range = 0;
    printf("请输入要生成的题目数量：\n");
    scanf_s("%d", &count);
    printf("请输入题目范围（范围应大于等于10且大于题目数量）：\n");
    scanf_s("%d", &range);
    generateExercises(count, range, answers, questions);
    printExercisesToFile(count, questions);
    printAnswersToFile(count, answers, questions);
    free(answers);
    free(questions);

    printf("题目和答案已生成并存入文件中。\n");

    return 0;
}
